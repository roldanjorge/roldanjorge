[{"content":"Equation $$ \\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Chain rule of probability] \\begin{equation} P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) \\end{equation} \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} \\end{tcolorbox} $$","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Chain rule of probability]\n    \\begin{equation}\n        P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n    \\end{equation}\n    \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n    \\end{equation}\n\\end{tcolorbox}\n$$","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Chain rule of probability] \\begin{equation} P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) \\end{equation} \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} \\end{tcolorbox} $$","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Chain rule of probability]\n    \\begin{equation}\n        P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n    \\end{equation}\n    \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n    \\end{equation}\n\\end{tcolorbox}\n$$","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\begin{equation} P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) \\end{equation} \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\begin{equation}\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n\\end{equation}\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\begin{equation} P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) \\end{equation} \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\begin{equation}\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n\\end{equation}\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\begin{equation} P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) \\end{equation} $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\begin{equation}\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n\\end{equation}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\begin{equation} P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) \\end{equation} $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\begin{equation}\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n\\end{equation}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\begin{equation} P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) \\end{equation} $$ \\end{tcolorbox}\n$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\begin{equation}\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n\\end{equation}\n$$\u003cp\u003e\n\\end{tcolorbox}\u003c/p\u003e\n$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\begin{tcolorbox} \\begin{equation} P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) \\end{equation} \\end{tcolorbox} $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\begin{tcolorbox}\n\\begin{equation}\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n\\end{equation}\n\\end{tcolorbox}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\begin{fcolorbox} \\begin{equation} P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) \\end{equation} \\end{fcolorbox} $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\begin{fcolorbox}\n\\begin{equation}\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n\\end{equation}\n\\end{fcolorbox}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\begin{fcolorbox} \\begin{equation} P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) \\end{equation} \\end{fcolorbox} $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\begin{fcolorbox}\n\\begin{equation}\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n\\end{equation}\n\\end{fcolorbox}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\begin{fcolorbox} \\begin{equation} P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) \\end{equation} \\end{fcolorbox} $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\begin{fcolorbox}\n\\begin{equation}\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n\\end{equation}\n\\end{fcolorbox}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\begin{fcolorbox} \\begin{equation} P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) \\end{equation} \\end{fcolorbox} $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\begin{fcolorbox}\n\\begin{equation}\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n\\end{equation}\n\\end{fcolorbox}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\begin{equation} P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) \\end{equation} $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\begin{equation}\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n\\end{equation}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ \\begin{equation} P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) \\end{equation} } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n\\begin{equation}\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n\\end{equation}\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ \\begin{equation} P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) \\end{equation} } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n\\begin{equation}\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n\\end{equation}\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ \\begin{equation} P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) \\end{equation} } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n\\begin{equation}\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n\\end{equation}\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ \\begin{equation} P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) \\end{equation} } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n\\begin{equation}\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n\\end{equation}\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ \\begin{equation} P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) \\end{equation} } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n\\begin{equation}\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n\\end{equation}\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ \\begin{equation} P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) \\end{equation} } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n\\begin{equation}\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n\\end{equation}\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ \\begin{equation} P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) \\end{equation} } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n\\begin{equation}\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n\\end{equation}\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\begin{equation} \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } \\end{equation} } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\begin{equation}\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n\\end{equation}\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\begin{equation} \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } \\end{equation} } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\begin{equation}\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n\\end{equation}\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$We apply this to words:\n\\begin{equation} P(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1}) \\end{equation}\n\\begin{equation} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\end{equation}\nIt is still hard to compute $P(w_{1:n})$ using the chain rule. The key insight of the n-gram model is that we can approximate the history just using the last few words. In the case of a bigram model, we approximate $P(w_n | w_{1:n-1})$ by using only the probability of the preceding word $P(w_n|w_{n-1})$\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Markov assumption] \\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1}) \\end{equation} An example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$ words into the past, respectively.\nGeneralization:\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-N+1:n-1}) \\end{equation} \\end{tcolorbox}\nIn the case of the bigram, we have:\n\\begin{equation} \\label{bigram_aprox} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\approx \\prod_{k=1}^{n} P(w_k|w_{k-1}) \\end{equation}\nWe can estimate equation\\ref{bigram_aprox} using the MLE (Maximum likelihood estimation)\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{\\sum_{w} C(w_{n-1} w)} \\end{equation} Which can be simplified to\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{C(w_{n-1} )} \\end{equation}\nWe can generalize the estimation of the MLE n-gram parameter as follows:\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=MLE n-gram parameter estimation]\n\\begin{equation} P(w_n|w_{n-N+1:n-1}) = \\frac{C(w_{n-N+1:n-1} \\ w_n)}{C(w_{n-N+1:n-1})} \\end{equation} This ratio is called the \\textbf{relative frequency} \\end{tcolorbox}\n\\subsection*{3.2. Evaluating Language models: Training and Test sets}\nThere are different ways of evaluating a language model such as extrinsic, and intrinsic evaluation. In extrinsic evaluation we embed the language model i an application and measure how the application\u0026rsquo;s performance improves, this is a very efficient way of evaluating models, but it is unfortunately very expensive. On the other hand, a intrinsic evaluation metric measures the quality of a model independent of an application, one of this metrics is the \\textbf{perplexity}.\n\\subsubsection*{Types of datasets for model evaluation} We need at least three types of datasets for evaluating a language model: training, development, and test sets.\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Types of datasets for model evaluation]\n\\textbf{Training set:} \\newline Dataset we use to learn the parameters of our model.\n\\textbf{Test set:} \\newpage Separate dataset from the training set used to evaluate the model. This test should reflect the language we want to use the model for. After training two models in the training set, we can compare how the two trained models fit the test set by determining which model assigns a higher probability to the test set. We only want to test the model once or very few times once on using the test set once the model is ready.\n\\textbf{Development set:} \\newpage We use the development set to do preliminary testing and when we are ready we only use the test set once or very few times. \\end{tcolorbox}\n\\subsection*{3.3. Evaluating Language models: Perplexity}\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Perplexity] \\textbf{Perplexity}: The perplexity (PP, PPL) of a language model on a test set is the inverse probability of the test set (one over the probability of the test set), normalized by the number of words. This is why sometimes it is called per-word perplexity.\nFor a test set $W=w_1 w_2 \\dots w_N$:\n\\begin{align} perplexity(W) \u0026amp;= P(w_1 w_2 \\dots w_N)^{-\\frac{1}{N}} \\ \u0026amp; = \\sqrt[N]{\\frac{1}{P(w_1 w_2 \\dots w_N)}} \\end{align}\nUsing the chain rule we obtain: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_1\\dots w_{i-1})}} \\end{equation}\n\\end{tcolorbox} Note that the higher the probability of a word sequence, the lower the perplexity. Thus, the \\textbf{lower the perplexity of a model on the data, the better the model.}. Minimizing the perplexity is equivalent to maximizing the test set probability according to the language model.\nThis is how we can calculate the perplexity of a unigram language model:\n\\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i)}} \\end{equation}\nAnd the same for a bigram model: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_{i-1})}} \\end{equation}\n\\subsection*{3.4. Sampling sentences from a language model} One technique to visualize the knowledge of a model is to sample from it. Sampling from a distribution means to choose random points according to their likelihood. Sampling from a language model, which represents a distribution over sentences, means to generate some sentences, choosing each sentence according to its likelihood as defined by the model.\n","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$\u003cp\u003eWe apply this to words:\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003eIt is still hard to compute $P(w_{1:n})$  using the chain rule. The key insight of the n-gram model is that we can approximate the history  just using the last few words. In the case of a bigram model, we approximate $P(w_n  | w_{1:n-1})$ by using only the probability of the preceding word $P(w_n|w_{n-1})$\u003c/p\u003e","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$We apply this to words:\n\\begin{equation} P(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1}) \\end{equation}\n\\begin{equation} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\end{equation}\nIt is still hard to compute $P(w_{1:n})$ using the chain rule. The key insight of the n-gram model is that we can approximate the history just using the last few words. In the case of a bigram model, we approximate $P(w_n | w_{1:n-1})$ by using only the probability of the preceding word $P(w_n|w_{n-1})$\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Markov assumption] \\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1}) \\end{equation} An example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$ words into the past, respectively.\nGeneralization:\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-N+1:n-1}) \\end{equation} \\end{tcolorbox}\nIn the case of the bigram, we have:\n\\begin{equation} \\label{bigram_aprox} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\approx \\prod_{k=1}^{n} P(w_k|w_{k-1}) \\end{equation}\nWe can estimate equation\\ref{bigram_aprox} using the MLE (Maximum likelihood estimation)\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{\\sum_{w} C(w_{n-1} w)} \\end{equation} Which can be simplified to\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{C(w_{n-1} )} \\end{equation}\nWe can generalize the estimation of the MLE n-gram parameter as follows:\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=MLE n-gram parameter estimation]\n\\begin{equation} P(w_n|w_{n-N+1:n-1}) = \\frac{C(w_{n-N+1:n-1} \\ w_n)}{C(w_{n-N+1:n-1})} \\end{equation} This ratio is called the \\textbf{relative frequency} \\end{tcolorbox}\n\\subsection*{3.2. Evaluating Language models: Training and Test sets}\nThere are different ways of evaluating a language model such as extrinsic, and intrinsic evaluation. In extrinsic evaluation we embed the language model i an application and measure how the application\u0026rsquo;s performance improves, this is a very efficient way of evaluating models, but it is unfortunately very expensive. On the other hand, a intrinsic evaluation metric measures the quality of a model independent of an application, one of this metrics is the \\textbf{perplexity}.\n\\subsubsection*{Types of datasets for model evaluation} We need at least three types of datasets for evaluating a language model: training, development, and test sets.\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Types of datasets for model evaluation]\n\\textbf{Training set:} \\newline Dataset we use to learn the parameters of our model.\n\\textbf{Test set:} \\newpage Separate dataset from the training set used to evaluate the model. This test should reflect the language we want to use the model for. After training two models in the training set, we can compare how the two trained models fit the test set by determining which model assigns a higher probability to the test set. We only want to test the model once or very few times once on using the test set once the model is ready.\n\\textbf{Development set:} \\newpage We use the development set to do preliminary testing and when we are ready we only use the test set once or very few times. \\end{tcolorbox}\n\\subsection*{3.3. Evaluating Language models: Perplexity}\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Perplexity] \\textbf{Perplexity}: The perplexity (PP, PPL) of a language model on a test set is the inverse probability of the test set (one over the probability of the test set), normalized by the number of words. This is why sometimes it is called per-word perplexity.\nFor a test set $W=w_1 w_2 \\dots w_N$:\n\\begin{align} perplexity(W) \u0026amp;= P(w_1 w_2 \\dots w_N)^{-\\frac{1}{N}} \\ \u0026amp; = \\sqrt[N]{\\frac{1}{P(w_1 w_2 \\dots w_N)}} \\end{align}\nUsing the chain rule we obtain: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_1\\dots w_{i-1})}} \\end{equation}\n\\end{tcolorbox} Note that the higher the probability of a word sequence, the lower the perplexity. Thus, the \\textbf{lower the perplexity of a model on the data, the better the model.}. Minimizing the perplexity is equivalent to maximizing the test set probability according to the language model.\nThis is how we can calculate the perplexity of a unigram language model:\n\\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i)}} \\end{equation}\nAnd the same for a bigram model: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_{i-1})}} \\end{equation}\n\\subsection*{3.4. Sampling sentences from a language model} One technique to visualize the knowledge of a model is to sample from it. Sampling from a distribution means to choose random points according to their likelihood. Sampling from a language model, which represents a distribution over sentences, means to generate some sentences, choosing each sentence according to its likelihood as defined by the model.\n","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$\u003cp\u003eWe apply this to words:\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003eIt is still hard to compute $P(w_{1:n})$  using the chain rule. The key insight of the n-gram model is that we can approximate the history  just using the last few words. In the case of a bigram model, we approximate $P(w_n  | w_{1:n-1})$ by using only the probability of the preceding word $P(w_n|w_{n-1})$\u003c/p\u003e","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$We apply this to words:\n\\begin{equation} P(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1}) \\end{equation}\n\\begin{equation} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\end{equation}\nIt is still hard to compute $P(w_{1:n})$ using the chain rule. The key insight of the n-gram model is that we can approximate the history just using the last few words. In the case of a bigram model, we approximate $P(w_n | w_{1:n-1})$ by using only the probability of the preceding word $P(w_n|w_{n-1})$\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Markov assumption] \\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1}) \\end{equation} An example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$ words into the past, respectively.\nGeneralization:\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-N+1:n-1}) \\end{equation} \\end{tcolorbox}\nIn the case of the bigram, we have:\n\\begin{equation} \\label{bigram_aprox} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\approx \\prod_{k=1}^{n} P(w_k|w_{k-1}) \\end{equation}\nWe can estimate equation\\ref{bigram_aprox} using the MLE (Maximum likelihood estimation)\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{\\sum_{w} C(w_{n-1} w)} \\end{equation} Which can be simplified to\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{C(w_{n-1} )} \\end{equation}\nWe can generalize the estimation of the MLE n-gram parameter as follows:\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=MLE n-gram parameter estimation]\n\\begin{equation} P(w_n|w_{n-N+1:n-1}) = \\frac{C(w_{n-N+1:n-1} \\ w_n)}{C(w_{n-N+1:n-1})} \\end{equation} This ratio is called the \\textbf{relative frequency} \\end{tcolorbox}\n*{3.2. Evaluating Language models: Training and Test sets}\nThere are different ways of evaluating a language model such as extrinsic, and intrinsic evaluation. In extrinsic evaluation we embed the language model i an application and measure how the application\u0026rsquo;s performance improves, this is a very efficient way of evaluating models, but it is unfortunately very expensive. On the other hand, a intrinsic evaluation metric measures the quality of a model independent of an application, one of this metrics is the \\textbf{perplexity}.\n\\subsubsection*{Types of datasets for model evaluation} We need at least three types of datasets for evaluating a language model: training, development, and test sets.\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Types of datasets for model evaluation]\n\\textbf{Training set:} \\newline Dataset we use to learn the parameters of our model.\n\\textbf{Test set:} \\newpage Separate dataset from the training set used to evaluate the model. This test should reflect the language we want to use the model for. After training two models in the training set, we can compare how the two trained models fit the test set by determining which model assigns a higher probability to the test set. We only want to test the model once or very few times once on using the test set once the model is ready.\n\\textbf{Development set:} \\newpage We use the development set to do preliminary testing and when we are ready we only use the test set once or very few times. \\end{tcolorbox}\n\\subsection*{3.3. Evaluating Language models: Perplexity}\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Perplexity] \\textbf{Perplexity}: The perplexity (PP, PPL) of a language model on a test set is the inverse probability of the test set (one over the probability of the test set), normalized by the number of words. This is why sometimes it is called per-word perplexity.\nFor a test set $W=w_1 w_2 \\dots w_N$:\n\\begin{align} perplexity(W) \u0026amp;= P(w_1 w_2 \\dots w_N)^{-\\frac{1}{N}} \\ \u0026amp; = \\sqrt[N]{\\frac{1}{P(w_1 w_2 \\dots w_N)}} \\end{align}\nUsing the chain rule we obtain: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_1\\dots w_{i-1})}} \\end{equation}\n\\end{tcolorbox} Note that the higher the probability of a word sequence, the lower the perplexity. Thus, the \\textbf{lower the perplexity of a model on the data, the better the model.}. Minimizing the perplexity is equivalent to maximizing the test set probability according to the language model.\nThis is how we can calculate the perplexity of a unigram language model:\n\\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i)}} \\end{equation}\nAnd the same for a bigram model: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_{i-1})}} \\end{equation}\n\\subsection*{3.4. Sampling sentences from a language model} One technique to visualize the knowledge of a model is to sample from it. Sampling from a distribution means to choose random points according to their likelihood. Sampling from a language model, which represents a distribution over sentences, means to generate some sentences, choosing each sentence according to its likelihood as defined by the model.\n","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$\u003cp\u003eWe apply this to words:\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003eIt is still hard to compute $P(w_{1:n})$  using the chain rule. The key insight of the n-gram model is that we can approximate the history  just using the last few words. In the case of a bigram model, we approximate $P(w_n  | w_{1:n-1})$ by using only the probability of the preceding word $P(w_n|w_{n-1})$\u003c/p\u003e","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$We apply this to words:\n\\begin{equation} P(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1}) \\end{equation}\n\\begin{equation} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\end{equation}\nIt is still hard to compute $P(w_{1:n})$ using the chain rule. The key insight of the n-gram model is that we can approximate the history just using the last few words. In the case of a bigram model, we approximate $P(w_n | w_{1:n-1})$ by using only the probability of the preceding word $P(w_n|w_{n-1})$\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Markov assumption] \\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1}) \\end{equation} An example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$ words into the past, respectively.\nGeneralization:\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-N+1:n-1}) \\end{equation} \\end{tcolorbox}\nIn the case of the bigram, we have:\n\\begin{equation} \\label{bigram_aprox} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\approx \\prod_{k=1}^{n} P(w_k|w_{k-1}) \\end{equation}\nWe can estimate equation\\ref{bigram_aprox} using the MLE (Maximum likelihood estimation)\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{\\sum_{w} C(w_{n-1} w)} \\end{equation} Which can be simplified to\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{C(w_{n-1} )} \\end{equation}\nWe can generalize the estimation of the MLE n-gram parameter as follows:\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=MLE n-gram parameter estimation]\n\\begin{equation} P(w_n|w_{n-N+1:n-1}) = \\frac{C(w_{n-N+1:n-1} \\ w_n)}{C(w_{n-N+1:n-1})} \\end{equation} This ratio is called the \\textbf{relative frequency} \\end{tcolorbox}\nEvaluating Language models: Training and Test sets There are different ways of evaluating a language model such as extrinsic, and intrinsic evaluation. In extrinsic evaluation we embed the language model i an application and measure how the application\u0026rsquo;s performance improves, this is a very efficient way of evaluating models, but it is unfortunately very expensive. On the other hand, a intrinsic evaluation metric measures the quality of a model independent of an application, one of this metrics is the \\textbf{perplexity}.\n\\subsubsection*{Types of datasets for model evaluation} We need at least three types of datasets for evaluating a language model: training, development, and test sets.\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Types of datasets for model evaluation]\n\\textbf{Training set:} \\newline Dataset we use to learn the parameters of our model.\n\\textbf{Test set:} \\newpage Separate dataset from the training set used to evaluate the model. This test should reflect the language we want to use the model for. After training two models in the training set, we can compare how the two trained models fit the test set by determining which model assigns a higher probability to the test set. We only want to test the model once or very few times once on using the test set once the model is ready.\n\\textbf{Development set:} \\newpage We use the development set to do preliminary testing and when we are ready we only use the test set once or very few times. \\end{tcolorbox}\n\\subsection*{3.3. Evaluating Language models: Perplexity}\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Perplexity] \\textbf{Perplexity}: The perplexity (PP, PPL) of a language model on a test set is the inverse probability of the test set (one over the probability of the test set), normalized by the number of words. This is why sometimes it is called per-word perplexity.\nFor a test set $W=w_1 w_2 \\dots w_N$:\n\\begin{align} perplexity(W) \u0026amp;= P(w_1 w_2 \\dots w_N)^{-\\frac{1}{N}} \\ \u0026amp; = \\sqrt[N]{\\frac{1}{P(w_1 w_2 \\dots w_N)}} \\end{align}\nUsing the chain rule we obtain: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_1\\dots w_{i-1})}} \\end{equation}\n\\end{tcolorbox} Note that the higher the probability of a word sequence, the lower the perplexity. Thus, the \\textbf{lower the perplexity of a model on the data, the better the model.}. Minimizing the perplexity is equivalent to maximizing the test set probability according to the language model.\nThis is how we can calculate the perplexity of a unigram language model:\n\\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i)}} \\end{equation}\nAnd the same for a bigram model: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_{i-1})}} \\end{equation}\n\\subsection*{3.4. Sampling sentences from a language model} One technique to visualize the knowledge of a model is to sample from it. Sampling from a distribution means to choose random points according to their likelihood. Sampling from a language model, which represents a distribution over sentences, means to generate some sentences, choosing each sentence according to its likelihood as defined by the model.\n","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$\u003cp\u003eWe apply this to words:\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003eIt is still hard to compute $P(w_{1:n})$  using the chain rule. The key insight of the n-gram model is that we can approximate the history  just using the last few words. In the case of a bigram model, we approximate $P(w_n  | w_{1:n-1})$ by using only the probability of the preceding word $P(w_n|w_{n-1})$\u003c/p\u003e","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$We apply this to words:\n\\begin{equation} P(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1}) \\end{equation}\n\\begin{equation} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\end{equation}\nIt is still hard to compute $P(w_{1:n})$ using the chain rule. The key insight of the n-gram model is that we can approximate the history just using the last few words. In the case of a bigram model, we approximate $P(w_n | w_{1:n-1})$ by using only the probability of the preceding word $P(w_n|w_{n-1})$\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Markov assumption] \\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1}) \\end{equation} An example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$ words into the past, respectively.\nGeneralization:\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-N+1:n-1}) \\end{equation} \\end{tcolorbox}\nIn the case of the bigram, we have:\n\\begin{equation} \\label{bigram_aprox} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\approx \\prod_{k=1}^{n} P(w_k|w_{k-1}) \\end{equation}\nWe can estimate equation\\ref{bigram_aprox} using the MLE (Maximum likelihood estimation)\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{\\sum_{w} C(w_{n-1} w)} \\end{equation} Which can be simplified to\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{C(w_{n-1} )} \\end{equation}\nWe can generalize the estimation of the MLE n-gram parameter as follows:\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=MLE n-gram parameter estimation]\n\\begin{equation} P(w_n|w_{n-N+1:n-1}) = \\frac{C(w_{n-N+1:n-1} \\ w_n)}{C(w_{n-N+1:n-1})} \\end{equation} This ratio is called the \\textbf{relative frequency} \\end{tcolorbox}\nEvaluating Language models: Training and Test sets There are different ways of evaluating a language model such as extrinsic, and intrinsic evaluation. In extrinsic evaluation we embed the language model i an application and measure how the application\u0026rsquo;s performance improves, this is a very efficient way of evaluating models, but it is unfortunately very expensive. On the other hand, a intrinsic evaluation metric measures the quality of a model independent of an application, one of this metrics is the \\textbf{perplexity}.\nTypes of datasets for model evaluation We need at least three types of datasets for evaluating a language model: training, development, and test sets.\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Types of datasets for model evaluation]\n\\textbf{Training set:} \\newline Dataset we use to learn the parameters of our model.\n\\textbf{Test set:} \\newpage Separate dataset from the training set used to evaluate the model. This test should reflect the language we want to use the model for. After training two models in the training set, we can compare how the two trained models fit the test set by determining which model assigns a higher probability to the test set. We only want to test the model once or very few times once on using the test set once the model is ready.\n\\textbf{Development set:} \\newpage We use the development set to do preliminary testing and when we are ready we only use the test set once or very few times. \\end{tcolorbox}\n\\subsection*{3.3. Evaluating Language models: Perplexity}\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Perplexity] \\textbf{Perplexity}: The perplexity (PP, PPL) of a language model on a test set is the inverse probability of the test set (one over the probability of the test set), normalized by the number of words. This is why sometimes it is called per-word perplexity.\nFor a test set $W=w_1 w_2 \\dots w_N$:\n\\begin{align} perplexity(W) \u0026amp;= P(w_1 w_2 \\dots w_N)^{-\\frac{1}{N}} \\ \u0026amp; = \\sqrt[N]{\\frac{1}{P(w_1 w_2 \\dots w_N)}} \\end{align}\nUsing the chain rule we obtain: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_1\\dots w_{i-1})}} \\end{equation}\n\\end{tcolorbox} Note that the higher the probability of a word sequence, the lower the perplexity. Thus, the \\textbf{lower the perplexity of a model on the data, the better the model.}. Minimizing the perplexity is equivalent to maximizing the test set probability according to the language model.\nThis is how we can calculate the perplexity of a unigram language model:\n\\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i)}} \\end{equation}\nAnd the same for a bigram model: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_{i-1})}} \\end{equation}\n\\subsection*{3.4. Sampling sentences from a language model} One technique to visualize the knowledge of a model is to sample from it. Sampling from a distribution means to choose random points according to their likelihood. Sampling from a language model, which represents a distribution over sentences, means to generate some sentences, choosing each sentence according to its likelihood as defined by the model.\n","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$\u003cp\u003eWe apply this to words:\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003eIt is still hard to compute $P(w_{1:n})$  using the chain rule. The key insight of the n-gram model is that we can approximate the history  just using the last few words. In the case of a bigram model, we approximate $P(w_n  | w_{1:n-1})$ by using only the probability of the preceding word $P(w_n|w_{n-1})$\u003c/p\u003e","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$We apply this to words:\n\\begin{equation} P(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1}) \\end{equation}\n\\begin{equation} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\end{equation}\nIt is still hard to compute $P(w_{1:n})$ using the chain rule. The key insight of the n-gram model is that we can approximate the history just using the last few words. In the case of a bigram model, we approximate $P(w_n | w_{1:n-1})$ by using only the probability of the preceding word $P(w_n|w_{n-1})$\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Markov assumption] \\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1}) \\end{equation} An example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$ words into the past, respectively.\nGeneralization:\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-N+1:n-1}) \\end{equation} \\end{tcolorbox}\nIn the case of the bigram, we have:\n\\begin{equation} \\label{bigram_aprox} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\approx \\prod_{k=1}^{n} P(w_k|w_{k-1}) \\end{equation}\nWe can estimate equation\\ref{bigram_aprox} using the MLE (Maximum likelihood estimation)\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{\\sum_{w} C(w_{n-1} w)} \\end{equation} Which can be simplified to\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{C(w_{n-1} )} \\end{equation}\nWe can generalize the estimation of the MLE n-gram parameter as follows:\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=MLE n-gram parameter estimation]\n\\begin{equation} P(w_n|w_{n-N+1:n-1}) = \\frac{C(w_{n-N+1:n-1} \\ w_n)}{C(w_{n-N+1:n-1})} \\end{equation} This ratio is called the \\textbf{relative frequency} \\end{tcolorbox}\nEvaluating Language models: Training and Test sets There are different ways of evaluating a language model such as extrinsic, and intrinsic evaluation. In extrinsic evaluation we embed the language model i an application and measure how the application\u0026rsquo;s performance improves, this is a very efficient way of evaluating models, but it is unfortunately very expensive. On the other hand, a intrinsic evaluation metric measures the quality of a model independent of an application, one of this metrics is the \\textbf{perplexity}.\nTypes of datasets for model evaluation We need at least three types of datasets for evaluating a language model: training, development, and test sets.\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Types of datasets for model evaluation]\n\\textbf{Training set:} \\newline Dataset we use to learn the parameters of our model.\n\\textbf{Test set:} \\newpage Separate dataset from the training set used to evaluate the model. This test should reflect the language we want to use the model for. After training two models in the training set, we can compare how the two trained models fit the test set by determining which model assigns a higher probability to the test set. We only want to test the model once or very few times once on using the test set once the model is ready.\n\\textbf{Development set:} \\newpage We use the development set to do preliminary testing and when we are ready we only use the test set once or very few times. \\end{tcolorbox}\n\\subsection*{3.3. Evaluating Language models: Perplexity}\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Perplexity] \\textbf{Perplexity}: The perplexity (PP, PPL) of a language model on a test set is the inverse probability of the test set (one over the probability of the test set), normalized by the number of words. This is why sometimes it is called per-word perplexity.\nFor a test set $W=w_1 w_2 \\dots w_N$:\n\\begin{align} perplexity(W) \u0026amp;= P(w_1 w_2 \\dots w_N)^{-\\frac{1}{N}} \\ \u0026amp; = \\sqrt[N]{\\frac{1}{P(w_1 w_2 \\dots w_N)}} \\end{align}\nUsing the chain rule we obtain: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_1\\dots w_{i-1})}} \\end{equation}\n\\end{tcolorbox} Note that the higher the probability of a word sequence, the lower the perplexity. Thus, the \\textbf{lower the perplexity of a model on the data, the better the model.}. Minimizing the perplexity is equivalent to maximizing the test set probability according to the language model.\nThis is how we can calculate the perplexity of a unigram language model:\n\\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i)}} \\end{equation}\nAnd the same for a bigram model: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_{i-1})}} \\end{equation}\n\\subsection*{3.4. Sampling sentences from a language model} One technique to visualize the knowledge of a model is to sample from it. Sampling from a distribution means to choose random points according to their likelihood. Sampling from a language model, which represents a distribution over sentences, means to generate some sentences, choosing each sentence according to its likelihood as defined by the model.\n","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$\u003cp\u003eWe apply this to words:\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003eIt is still hard to compute $P(w_{1:n})$  using the chain rule. The key insight of the n-gram model is that we can approximate the history  just using the last few words. In the case of a bigram model, we approximate $P(w_n  | w_{1:n-1})$ by using only the probability of the preceding word $P(w_n|w_{n-1})$\u003c/p\u003e","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$We apply this to words:\n\\begin{equation} P(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1}) \\end{equation}\n\\begin{equation} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\end{equation}\nIt is still hard to compute $P(w_{1:n})$ using the chain rule. The key insight of the n-gram model is that we can approximate the history just using the last few words. In the case of a bigram model, we approximate $P(w_n | w_{1:n-1})$ by using only the probability of the preceding word $P(w_n|w_{n-1})$\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Markov assumption] \\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1}) \\end{equation} An example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$ words into the past, respectively.\nGeneralization:\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-N+1:n-1}) \\end{equation} \\end{tcolorbox}\nIn the case of the bigram, we have:\n\\begin{equation} \\label{bigram_aprox} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\approx \\prod_{k=1}^{n} P(w_k|w_{k-1}) \\end{equation}\nWe can estimate equation\\ref{bigram_aprox} using the MLE (Maximum likelihood estimation)\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{\\sum_{w} C(w_{n-1} w)} \\end{equation} Which can be simplified to\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{C(w_{n-1} )} \\end{equation}\nWe can generalize the estimation of the MLE n-gram parameter as follows:\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=MLE n-gram parameter estimation]\n\\begin{equation} P(w_n|w_{n-N+1:n-1}) = \\frac{C(w_{n-N+1:n-1} \\ w_n)}{C(w_{n-N+1:n-1})} \\end{equation} This ratio is called the \\textbf{relative frequency} \\end{tcolorbox}\nEvaluating Language models: Training and Test sets There are different ways of evaluating a language model such as extrinsic, and intrinsic evaluation. In extrinsic evaluation we embed the language model i an application and measure how the application\u0026rsquo;s performance improves, this is a very efficient way of evaluating models, but it is unfortunately very expensive. On the other hand, a intrinsic evaluation metric measures the quality of a model independent of an application, one of this metrics is the \\textbf{perplexity}.\nTypes of datasets for model evaluation We need at least three types of datasets for evaluating a language model: training, development, and test sets.\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Types of datasets for model evaluation]\n\\textbf{Training set:} \\newline Dataset we use to learn the parameters of our model.\n\\textbf{Test set:} \\newpage Separate dataset from the training set used to evaluate the model. This test should reflect the language we want to use the model for. After training two models in the training set, we can compare how the two trained models fit the test set by determining which model assigns a higher probability to the test set. We only want to test the model once or very few times once on using the test set once the model is ready.\n\\textbf{Development set:} \\newpage We use the development set to do preliminary testing and when we are ready we only use the test set once or very few times. \\end{tcolorbox}\n3.3. Evaluating Language models: Perplexity} \\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Perplexity] \\textbf{Perplexity}: The perplexity (PP, PPL) of a language model on a test set is the inverse probability of the test set (one over the probability of the test set), normalized by the number of words. This is why sometimes it is called per-word perplexity.\nFor a test set $W=w_1 w_2 \\dots w_N$:\n\\begin{align} perplexity(W) \u0026amp;= P(w_1 w_2 \\dots w_N)^{-\\frac{1}{N}} \\ \u0026amp; = \\sqrt[N]{\\frac{1}{P(w_1 w_2 \\dots w_N)}} \\end{align}\nUsing the chain rule we obtain: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_1\\dots w_{i-1})}} \\end{equation}\n\\end{tcolorbox} Note that the higher the probability of a word sequence, the lower the perplexity. Thus, the \\textbf{lower the perplexity of a model on the data, the better the model.}. Minimizing the perplexity is equivalent to maximizing the test set probability according to the language model.\nThis is how we can calculate the perplexity of a unigram language model:\n\\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i)}} \\end{equation}\nAnd the same for a bigram model: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_{i-1})}} \\end{equation}\n\\subsection*{3.4. Sampling sentences from a language model} One technique to visualize the knowledge of a model is to sample from it. Sampling from a distribution means to choose random points according to their likelihood. Sampling from a language model, which represents a distribution over sentences, means to generate some sentences, choosing each sentence according to its likelihood as defined by the model.\n","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$\u003cp\u003eWe apply this to words:\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003eIt is still hard to compute $P(w_{1:n})$  using the chain rule. The key insight of the n-gram model is that we can approximate the history  just using the last few words. In the case of a bigram model, we approximate $P(w_n  | w_{1:n-1})$ by using only the probability of the preceding word $P(w_n|w_{n-1})$\u003c/p\u003e","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$We apply this to words:\n\\begin{equation} P(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1}) \\end{equation}\n\\begin{equation} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\end{equation}\nIt is still hard to compute $P(w_{1:n})$ using the chain rule. The key insight of the n-gram model is that we can approximate the history just using the last few words. In the case of a bigram model, we approximate $P(w_n | w_{1:n-1})$ by using only the probability of the preceding word $P(w_n|w_{n-1})$\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Markov assumption] \\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1}) \\end{equation} An example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$ words into the past, respectively.\nGeneralization:\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-N+1:n-1}) \\end{equation} \\end{tcolorbox}\nIn the case of the bigram, we have:\n\\begin{equation} \\label{bigram_aprox} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\approx \\prod_{k=1}^{n} P(w_k|w_{k-1}) \\end{equation}\nWe can estimate equation\\ref{bigram_aprox} using the MLE (Maximum likelihood estimation)\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{\\sum_{w} C(w_{n-1} w)} \\end{equation} Which can be simplified to\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{C(w_{n-1} )} \\end{equation}\nWe can generalize the estimation of the MLE n-gram parameter as follows:\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=MLE n-gram parameter estimation]\n\\begin{equation} P(w_n|w_{n-N+1:n-1}) = \\frac{C(w_{n-N+1:n-1} \\ w_n)}{C(w_{n-N+1:n-1})} \\end{equation} This ratio is called the \\textbf{relative frequency} \\end{tcolorbox}\nEvaluating Language models: Training and Test sets There are different ways of evaluating a language model such as extrinsic, and intrinsic evaluation. In extrinsic evaluation we embed the language model i an application and measure how the application\u0026rsquo;s performance improves, this is a very efficient way of evaluating models, but it is unfortunately very expensive. On the other hand, a intrinsic evaluation metric measures the quality of a model independent of an application, one of this metrics is the \\textbf{perplexity}.\nTypes of datasets for model evaluation We need at least three types of datasets for evaluating a language model: training, development, and test sets.\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Types of datasets for model evaluation]\n\\textbf{Training set:} \\newline Dataset we use to learn the parameters of our model.\n\\textbf{Test set:} \\newpage Separate dataset from the training set used to evaluate the model. This test should reflect the language we want to use the model for. After training two models in the training set, we can compare how the two trained models fit the test set by determining which model assigns a higher probability to the test set. We only want to test the model once or very few times once on using the test set once the model is ready.\n\\textbf{Development set:} \\newpage We use the development set to do preliminary testing and when we are ready we only use the test set once or very few times. \\end{tcolorbox}\n3.3. Evaluating Language models: Perplexity \\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Perplexity] \\textbf{Perplexity}: The perplexity (PP, PPL) of a language model on a test set is the inverse probability of the test set (one over the probability of the test set), normalized by the number of words. This is why sometimes it is called per-word perplexity.\nFor a test set $W=w_1 w_2 \\dots w_N$:\n\\begin{align} perplexity(W) \u0026amp;= P(w_1 w_2 \\dots w_N)^{-\\frac{1}{N}} \\ \u0026amp; = \\sqrt[N]{\\frac{1}{P(w_1 w_2 \\dots w_N)}} \\end{align}\nUsing the chain rule we obtain: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_1\\dots w_{i-1})}} \\end{equation}\n\\end{tcolorbox} Note that the higher the probability of a word sequence, the lower the perplexity. Thus, the \\textbf{lower the perplexity of a model on the data, the better the model.}. Minimizing the perplexity is equivalent to maximizing the test set probability according to the language model.\nThis is how we can calculate the perplexity of a unigram language model:\n\\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i)}} \\end{equation}\nAnd the same for a bigram model: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_{i-1})}} \\end{equation}\n3.4. Sampling sentences from a language model One technique to visualize the knowledge of a model is to sample from it. Sampling from a distribution means to choose random points according to their likelihood. Sampling from a language model, which represents a distribution over sentences, means to generate some sentences, choosing each sentence according to its likelihood as defined by the model.\n","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$\u003cp\u003eWe apply this to words:\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003eIt is still hard to compute $P(w_{1:n})$  using the chain rule. The key insight of the n-gram model is that we can approximate the history  just using the last few words. In the case of a bigram model, we approximate $P(w_n  | w_{1:n-1})$ by using only the probability of the preceding word $P(w_n|w_{n-1})$\u003c/p\u003e","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$We apply this to words:\n\\begin{equation} P(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1}) \\end{equation}\n\\begin{equation} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\end{equation}\nIt is still hard to compute $P(w_{1:n})$ using the chain rule. The key insight of the n-gram model is that we can approximate the history just using the last few words. In the case of a bigram model, we approximate $P(w_n | w_{1:n-1})$ by using only the probability of the preceding word $P(w_n|w_{n-1})$\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1}) \\end{equation} An example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$ words into the past, respectively.\nGeneralization:\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-N+1:n-1}) \\end{equation} \\end{tcolorbox}\nIn the case of the bigram, we have:\n\\begin{equation} \\label{bigram_aprox} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\approx \\prod_{k=1}^{n} P(w_k|w_{k-1}) \\end{equation}\nWe can estimate equation\\ref{bigram_aprox} using the MLE (Maximum likelihood estimation)\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{\\sum_{w} C(w_{n-1} w)} \\end{equation} Which can be simplified to\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{C(w_{n-1} )} \\end{equation}\nWe can generalize the estimation of the MLE n-gram parameter as follows:\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=MLE n-gram parameter estimation]\n\\begin{equation} P(w_n|w_{n-N+1:n-1}) = \\frac{C(w_{n-N+1:n-1} \\ w_n)}{C(w_{n-N+1:n-1})} \\end{equation} This ratio is called the \\textbf{relative frequency} \\end{tcolorbox}\nEvaluating Language models: Training and Test sets There are different ways of evaluating a language model such as extrinsic, and intrinsic evaluation. In extrinsic evaluation we embed the language model i an application and measure how the application\u0026rsquo;s performance improves, this is a very efficient way of evaluating models, but it is unfortunately very expensive. On the other hand, a intrinsic evaluation metric measures the quality of a model independent of an application, one of this metrics is the \\textbf{perplexity}.\nTypes of datasets for model evaluation We need at least three types of datasets for evaluating a language model: training, development, and test sets.\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Types of datasets for model evaluation]\n\\textbf{Training set:} \\newline Dataset we use to learn the parameters of our model.\n\\textbf{Test set:} \\newpage Separate dataset from the training set used to evaluate the model. This test should reflect the language we want to use the model for. After training two models in the training set, we can compare how the two trained models fit the test set by determining which model assigns a higher probability to the test set. We only want to test the model once or very few times once on using the test set once the model is ready.\n\\textbf{Development set:} \\newpage We use the development set to do preliminary testing and when we are ready we only use the test set once or very few times. \\end{tcolorbox}\n3.3. Evaluating Language models: Perplexity \\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Perplexity] \\textbf{Perplexity}: The perplexity (PP, PPL) of a language model on a test set is the inverse probability of the test set (one over the probability of the test set), normalized by the number of words. This is why sometimes it is called per-word perplexity.\nFor a test set $W=w_1 w_2 \\dots w_N$:\n\\begin{align} perplexity(W) \u0026amp;= P(w_1 w_2 \\dots w_N)^{-\\frac{1}{N}} \\ \u0026amp; = \\sqrt[N]{\\frac{1}{P(w_1 w_2 \\dots w_N)}} \\end{align}\nUsing the chain rule we obtain: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_1\\dots w_{i-1})}} \\end{equation}\n\\end{tcolorbox} Note that the higher the probability of a word sequence, the lower the perplexity. Thus, the \\textbf{lower the perplexity of a model on the data, the better the model.}. Minimizing the perplexity is equivalent to maximizing the test set probability according to the language model.\nThis is how we can calculate the perplexity of a unigram language model:\n\\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i)}} \\end{equation}\nAnd the same for a bigram model: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_{i-1})}} \\end{equation}\n3.4. Sampling sentences from a language model One technique to visualize the knowledge of a model is to sample from it. Sampling from a distribution means to choose random points according to their likelihood. Sampling from a language model, which represents a distribution over sentences, means to generate some sentences, choosing each sentence according to its likelihood as defined by the model.\n","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$\u003cp\u003eWe apply this to words:\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003eIt is still hard to compute $P(w_{1:n})$  using the chain rule. The key insight of the n-gram model is that we can approximate the history  just using the last few words. In the case of a bigram model, we approximate $P(w_n  | w_{1:n-1})$ by using only the probability of the preceding word $P(w_n|w_{n-1})$\u003c/p\u003e","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$We apply this to words:\n\\begin{equation} P(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1}) \\end{equation}\n\\begin{equation} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\end{equation}\nIt is still hard to compute $P(w_{1:n})$ using the chain rule. The key insight of the n-gram model is that we can approximate the history just using the last few words. In the case of a bigram model, we approximate $P(w_n | w_{1:n-1})$ by using only the probability of the preceding word $P(w_n|w_{n-1})$\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1}) \\end{equation} An example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$ words into the past, respectively.\nGeneralization:\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-N+1:n-1}) \\end{equation} \\end{tcolorbox}\nIn the case of the bigram, we have:\n\\begin{equation} \\label{bigram_aprox} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\approx \\prod_{k=1}^{n} P(w_k|w_{k-1}) \\end{equation}\nWe can estimate equation\\ref{bigram_aprox} using the MLE (Maximum likelihood estimation)\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{\\sum_{w} C(w_{n-1} w)} \\end{equation} Which can be simplified to\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{C(w_{n-1} )} \\end{equation}\nWe can generalize the estimation of the MLE n-gram parameter as follows:\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=MLE n-gram parameter estimation]\n\\begin{equation} P(w_n|w_{n-N+1:n-1}) = \\frac{C(w_{n-N+1:n-1} \\ w_n)}{C(w_{n-N+1:n-1})} \\end{equation} This ratio is called the \\textbf{relative frequency} \\end{tcolorbox}\nEvaluating Language models: Training and Test sets There are different ways of evaluating a language model such as extrinsic, and intrinsic evaluation. In extrinsic evaluation we embed the language model i an application and measure how the application\u0026rsquo;s performance improves, this is a very efficient way of evaluating models, but it is unfortunately very expensive. On the other hand, a intrinsic evaluation metric measures the quality of a model independent of an application, one of this metrics is the \\textbf{perplexity}.\nTypes of datasets for model evaluation We need at least three types of datasets for evaluating a language model: training, development, and test sets.\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Types of datasets for model evaluation]\n\\textbf{Training set:} \\newline Dataset we use to learn the parameters of our model.\n\\textbf{Test set:} \\newpage Separate dataset from the training set used to evaluate the model. This test should reflect the language we want to use the model for. After training two models in the training set, we can compare how the two trained models fit the test set by determining which model assigns a higher probability to the test set. We only want to test the model once or very few times once on using the test set once the model is ready.\n\\textbf{Development set:} \\newpage We use the development set to do preliminary testing and when we are ready we only use the test set once or very few times. \\end{tcolorbox}\n3.3. Evaluating Language models: Perplexity \\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Perplexity] \\textbf{Perplexity}: The perplexity (PP, PPL) of a language model on a test set is the inverse probability of the test set (one over the probability of the test set), normalized by the number of words. This is why sometimes it is called per-word perplexity.\nFor a test set $W=w_1 w_2 \\dots w_N$:\n\\begin{align} perplexity(W) \u0026amp;= P(w_1 w_2 \\dots w_N)^{-\\frac{1}{N}} \\ \u0026amp; = \\sqrt[N]{\\frac{1}{P(w_1 w_2 \\dots w_N)}} \\end{align}\nUsing the chain rule we obtain: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_1\\dots w_{i-1})}} \\end{equation}\n\\end{tcolorbox} Note that the higher the probability of a word sequence, the lower the perplexity. Thus, the \\textbf{lower the perplexity of a model on the data, the better the model.}. Minimizing the perplexity is equivalent to maximizing the test set probability according to the language model.\nThis is how we can calculate the perplexity of a unigram language model:\n\\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i)}} \\end{equation}\nAnd the same for a bigram model: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_{i-1})}} \\end{equation}\n3.4. Sampling sentences from a language model One technique to visualize the knowledge of a model is to sample from it. Sampling from a distribution means to choose random points according to their likelihood. Sampling from a language model, which represents a distribution over sentences, means to generate some sentences, choosing each sentence according to its likelihood as defined by the model.\n","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$\u003cp\u003eWe apply this to words:\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003eIt is still hard to compute $P(w_{1:n})$  using the chain rule. The key insight of the n-gram model is that we can approximate the history  just using the last few words. In the case of a bigram model, we approximate $P(w_n  | w_{1:n-1})$ by using only the probability of the preceding word $P(w_n|w_{n-1})$\u003c/p\u003e","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$We apply this to words:\n\\begin{equation} P(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1}) \\end{equation}\n\\begin{equation} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\end{equation}\nIt is still hard to compute $P(w_{1:n})$ using the chain rule. The key insight of the n-gram model is that we can approximate the history just using the last few words. In the case of a bigram model, we approximate $P(w_n | w_{1:n-1})$ by using only the probability of the preceding word $P(w_n|w_{n-1})$\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1}) \\end{equation}\nAn example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$ words into the past, respectively.\nGeneralization:\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-N+1:n-1}) \\end{equation} \\end{tcolorbox}\nIn the case of the bigram, we have:\n\\begin{equation} \\label{bigram_aprox} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\approx \\prod_{k=1}^{n} P(w_k|w_{k-1}) \\end{equation}\nWe can estimate equation\\ref{bigram_aprox} using the MLE (Maximum likelihood estimation)\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{\\sum_{w} C(w_{n-1} w)} \\end{equation} Which can be simplified to\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{C(w_{n-1} )} \\end{equation}\nWe can generalize the estimation of the MLE n-gram parameter as follows:\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=MLE n-gram parameter estimation]\n\\begin{equation} P(w_n|w_{n-N+1:n-1}) = \\frac{C(w_{n-N+1:n-1} \\ w_n)}{C(w_{n-N+1:n-1})} \\end{equation} This ratio is called the \\textbf{relative frequency} \\end{tcolorbox}\nEvaluating Language models: Training and Test sets There are different ways of evaluating a language model such as extrinsic, and intrinsic evaluation. In extrinsic evaluation we embed the language model i an application and measure how the application\u0026rsquo;s performance improves, this is a very efficient way of evaluating models, but it is unfortunately very expensive. On the other hand, a intrinsic evaluation metric measures the quality of a model independent of an application, one of this metrics is the \\textbf{perplexity}.\nTypes of datasets for model evaluation We need at least three types of datasets for evaluating a language model: training, development, and test sets.\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Types of datasets for model evaluation]\n\\textbf{Training set:} \\newline Dataset we use to learn the parameters of our model.\n\\textbf{Test set:} \\newpage Separate dataset from the training set used to evaluate the model. This test should reflect the language we want to use the model for. After training two models in the training set, we can compare how the two trained models fit the test set by determining which model assigns a higher probability to the test set. We only want to test the model once or very few times once on using the test set once the model is ready.\n\\textbf{Development set:} \\newpage We use the development set to do preliminary testing and when we are ready we only use the test set once or very few times. \\end{tcolorbox}\n3.3. Evaluating Language models: Perplexity \\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Perplexity] \\textbf{Perplexity}: The perplexity (PP, PPL) of a language model on a test set is the inverse probability of the test set (one over the probability of the test set), normalized by the number of words. This is why sometimes it is called per-word perplexity.\nFor a test set $W=w_1 w_2 \\dots w_N$:\n\\begin{align} perplexity(W) \u0026amp;= P(w_1 w_2 \\dots w_N)^{-\\frac{1}{N}} \\ \u0026amp; = \\sqrt[N]{\\frac{1}{P(w_1 w_2 \\dots w_N)}} \\end{align}\nUsing the chain rule we obtain: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_1\\dots w_{i-1})}} \\end{equation}\n\\end{tcolorbox} Note that the higher the probability of a word sequence, the lower the perplexity. Thus, the \\textbf{lower the perplexity of a model on the data, the better the model.}. Minimizing the perplexity is equivalent to maximizing the test set probability according to the language model.\nThis is how we can calculate the perplexity of a unigram language model:\n\\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i)}} \\end{equation}\nAnd the same for a bigram model: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_{i-1})}} \\end{equation}\n3.4. Sampling sentences from a language model One technique to visualize the knowledge of a model is to sample from it. Sampling from a distribution means to choose random points according to their likelihood. Sampling from a language model, which represents a distribution over sentences, means to generate some sentences, choosing each sentence according to its likelihood as defined by the model.\n","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$\u003cp\u003eWe apply this to words:\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003eIt is still hard to compute $P(w_{1:n})$  using the chain rule. The key insight of the n-gram model is that we can approximate the history  just using the last few words. In the case of a bigram model, we approximate $P(w_n  | w_{1:n-1})$ by using only the probability of the preceding word $P(w_n|w_{n-1})$\u003c/p\u003e","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$We apply this to words:\n\\begin{equation} P(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1}) \\end{equation}\n\\begin{equation} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\end{equation}\nIt is still hard to compute $P(w_{1:n})$ using the chain rule. The key insight of the n-gram model is that we can approximate the history just using the last few words. In the case of a bigram model, we approximate $P(w_n | w_{1:n-1})$ by using only the probability of the preceding word $P(w_n|w_{n-1})$\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1}) \\end{equation}\nAn example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$ words into the past, respectively.\nGeneralization:\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-N+1:n-1}) \\end{equation} \\end{tcolorbox}\nIn the case of the bigram, we have:\n\\begin{equation} \\label{bigram_aprox} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\approx \\prod_{k=1}^{n} P(w_k|w_{k-1}) \\end{equation}\nWe can estimate equation\\ref{bigram_aprox} using the MLE (Maximum likelihood estimation)\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{\\sum_{w} C(w_{n-1} w)} \\end{equation} Which can be simplified to\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{C(w_{n-1} )} \\end{equation}\nWe can generalize the estimation of the MLE n-gram parameter as follows:\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=MLE n-gram parameter estimation]\n\\begin{equation} P(w_n|w_{n-N+1:n-1}) = \\frac{C(w_{n-N+1:n-1} \\ w_n)}{C(w_{n-N+1:n-1})} \\end{equation} This ratio is called the \\textbf{relative frequency} \\end{tcolorbox}\nEvaluating Language models: Training and Test sets There are different ways of evaluating a language model such as extrinsic, and intrinsic evaluation. In extrinsic evaluation we embed the language model i an application and measure how the application\u0026rsquo;s performance improves, this is a very efficient way of evaluating models, but it is unfortunately very expensive. On the other hand, a intrinsic evaluation metric measures the quality of a model independent of an application, one of this metrics is the \\textbf{perplexity}.\nTypes of datasets for model evaluation We need at least three types of datasets for evaluating a language model: training, development, and test sets.\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Types of datasets for model evaluation]\n\\textbf{Training set:} \\newline Dataset we use to learn the parameters of our model.\n\\textbf{Test set:} \\newpage Separate dataset from the training set used to evaluate the model. This test should reflect the language we want to use the model for. After training two models in the training set, we can compare how the two trained models fit the test set by determining which model assigns a higher probability to the test set. We only want to test the model once or very few times once on using the test set once the model is ready.\n\\textbf{Development set:} \\newpage We use the development set to do preliminary testing and when we are ready we only use the test set once or very few times. \\end{tcolorbox}\n3.3. Evaluating Language models: Perplexity \\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Perplexity] \\textbf{Perplexity}: The perplexity (PP, PPL) of a language model on a test set is the inverse probability of the test set (one over the probability of the test set), normalized by the number of words. This is why sometimes it is called per-word perplexity.\nFor a test set $W=w_1 w_2 \\dots w_N$:\n\\begin{align} perplexity(W) \u0026amp;= P(w_1 w_2 \\dots w_N)^{-\\frac{1}{N}} \\ \u0026amp; = \\sqrt[N]{\\frac{1}{P(w_1 w_2 \\dots w_N)}} \\end{align}\nUsing the chain rule we obtain: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_1\\dots w_{i-1})}} \\end{equation}\n\\end{tcolorbox} Note that the higher the probability of a word sequence, the lower the perplexity. Thus, the \\textbf{lower the perplexity of a model on the data, the better the model.}. Minimizing the perplexity is equivalent to maximizing the test set probability according to the language model.\nThis is how we can calculate the perplexity of a unigram language model:\n\\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i)}} \\end{equation}\nAnd the same for a bigram model: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_{i-1})}} \\end{equation}\n3.4. Sampling sentences from a language model One technique to visualize the knowledge of a model is to sample from it. Sampling from a distribution means to choose random points according to their likelihood. Sampling from a language model, which represents a distribution over sentences, means to generate some sentences, choosing each sentence according to its likelihood as defined by the model.\n","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$\u003cp\u003eWe apply this to words:\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003eIt is still hard to compute $P(w_{1:n})$  using the chain rule. The key insight of the n-gram model is that we can approximate the history  just using the last few words. In the case of a bigram model, we approximate $P(w_n  | w_{1:n-1})$ by using only the probability of the preceding word $P(w_n|w_{n-1})$\u003c/p\u003e","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$We apply this to words:\n\\begin{equation} P(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1}) \\end{equation}\n\\begin{equation} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\end{equation}\n$$P(w_n|w_{n-1})$$\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1}) \\end{equation}\nAn example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$ words into the past, respectively.\nGeneralization:\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-N+1:n-1}) \\end{equation} \\end{tcolorbox}\nIn the case of the bigram, we have:\n\\begin{equation} \\label{bigram_aprox} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\approx \\prod_{k=1}^{n} P(w_k|w_{k-1}) \\end{equation}\nWe can estimate equation\\ref{bigram_aprox} using the MLE (Maximum likelihood estimation)\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{\\sum_{w} C(w_{n-1} w)} \\end{equation} Which can be simplified to\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{C(w_{n-1} )} \\end{equation}\nWe can generalize the estimation of the MLE n-gram parameter as follows:\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=MLE n-gram parameter estimation]\n\\begin{equation} P(w_n|w_{n-N+1:n-1}) = \\frac{C(w_{n-N+1:n-1} \\ w_n)}{C(w_{n-N+1:n-1})} \\end{equation} This ratio is called the \\textbf{relative frequency} \\end{tcolorbox}\nEvaluating Language models: Training and Test sets There are different ways of evaluating a language model such as extrinsic, and intrinsic evaluation. In extrinsic evaluation we embed the language model i an application and measure how the application\u0026rsquo;s performance improves, this is a very efficient way of evaluating models, but it is unfortunately very expensive. On the other hand, a intrinsic evaluation metric measures the quality of a model independent of an application, one of this metrics is the \\textbf{perplexity}.\nTypes of datasets for model evaluation We need at least three types of datasets for evaluating a language model: training, development, and test sets.\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Types of datasets for model evaluation]\n\\textbf{Training set:} \\newline Dataset we use to learn the parameters of our model.\n\\textbf{Test set:} \\newpage Separate dataset from the training set used to evaluate the model. This test should reflect the language we want to use the model for. After training two models in the training set, we can compare how the two trained models fit the test set by determining which model assigns a higher probability to the test set. We only want to test the model once or very few times once on using the test set once the model is ready.\n\\textbf{Development set:} \\newpage We use the development set to do preliminary testing and when we are ready we only use the test set once or very few times. \\end{tcolorbox}\n3.3. Evaluating Language models: Perplexity \\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Perplexity] \\textbf{Perplexity}: The perplexity (PP, PPL) of a language model on a test set is the inverse probability of the test set (one over the probability of the test set), normalized by the number of words. This is why sometimes it is called per-word perplexity.\nFor a test set $W=w_1 w_2 \\dots w_N$:\n\\begin{align} perplexity(W) \u0026amp;= P(w_1 w_2 \\dots w_N)^{-\\frac{1}{N}} \\ \u0026amp; = \\sqrt[N]{\\frac{1}{P(w_1 w_2 \\dots w_N)}} \\end{align}\nUsing the chain rule we obtain: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_1\\dots w_{i-1})}} \\end{equation}\n\\end{tcolorbox} Note that the higher the probability of a word sequence, the lower the perplexity. Thus, the \\textbf{lower the perplexity of a model on the data, the better the model.}. Minimizing the perplexity is equivalent to maximizing the test set probability according to the language model.\nThis is how we can calculate the perplexity of a unigram language model:\n\\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i)}} \\end{equation}\nAnd the same for a bigram model: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_{i-1})}} \\end{equation}\n3.4. Sampling sentences from a language model One technique to visualize the knowledge of a model is to sample from it. Sampling from a distribution means to choose random points according to their likelihood. Sampling from a language model, which represents a distribution over sentences, means to generate some sentences, choosing each sentence according to its likelihood as defined by the model.\n","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$\u003cp\u003eWe apply this to words:\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1})\n\\end{equation}\u003c/p\u003e\n$$P(w_n|w_{n-1})$$\u003cp\u003e\\begin{equation}\nP(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003eAn example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$\nwords into the past, respectively.\u003c/p\u003e","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$We apply this to words:\n\\begin{equation} P(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1}) \\end{equation}\n\\begin{equation} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\end{equation}\n$$P(w_n|w_{n-1})$$\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1}) \\end{equation}\nAn example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$ words into the past, respectively.\nGeneralization:\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-N+1:n-1}) \\end{equation} \\end{tcolorbox}\nIn the case of the bigram, we have:\n\\begin{equation} \\label{bigram_aprox} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\approx \\prod_{k=1}^{n} P(w_k|w_{k-1}) \\end{equation}\nWe can estimate equation\\ref{bigram_aprox} using the MLE (Maximum likelihood estimation)\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{\\sum_{w} C(w_{n-1} w)} \\end{equation} Which can be simplified to\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{C(w_{n-1} )} \\end{equation}\nWe can generalize the estimation of the MLE n-gram parameter as follows:\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=MLE n-gram parameter estimation]\n\\begin{equation} P(w_n|w_{n-N+1:n-1}) = \\frac{C(w_{n-N+1:n-1} \\ w_n)}{C(w_{n-N+1:n-1})} \\end{equation} This ratio is called the \\textbf{relative frequency} \\end{tcolorbox}\nEvaluating Language models: Training and Test sets There are different ways of evaluating a language model such as extrinsic, and intrinsic evaluation. In extrinsic evaluation we embed the language model i an application and measure how the application\u0026rsquo;s performance improves, this is a very efficient way of evaluating models, but it is unfortunately very expensive. On the other hand, a intrinsic evaluation metric measures the quality of a model independent of an application, one of this metrics is the \\textbf{perplexity}.\nTypes of datasets for model evaluation We need at least three types of datasets for evaluating a language model: training, development, and test sets.\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Types of datasets for model evaluation]\n\\textbf{Training set:} \\newline Dataset we use to learn the parameters of our model.\n\\textbf{Test set:} \\newpage Separate dataset from the training set used to evaluate the model. This test should reflect the language we want to use the model for. After training two models in the training set, we can compare how the two trained models fit the test set by determining which model assigns a higher probability to the test set. We only want to test the model once or very few times once on using the test set once the model is ready.\n\\textbf{Development set:} \\newpage We use the development set to do preliminary testing and when we are ready we only use the test set once or very few times. \\end{tcolorbox}\n3.3. Evaluating Language models: Perplexity \\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Perplexity] \\textbf{Perplexity}: The perplexity (PP, PPL) of a language model on a test set is the inverse probability of the test set (one over the probability of the test set), normalized by the number of words. This is why sometimes it is called per-word perplexity.\nFor a test set $W=w_1 w_2 \\dots w_N$:\n\\begin{align} perplexity(W) \u0026amp;= P(w_1 w_2 \\dots w_N)^{-\\frac{1}{N}} \\ \u0026amp; = \\sqrt[N]{\\frac{1}{P(w_1 w_2 \\dots w_N)}} \\end{align}\nUsing the chain rule we obtain: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_1\\dots w_{i-1})}} \\end{equation}\n\\end{tcolorbox} Note that the higher the probability of a word sequence, the lower the perplexity. Thus, the \\textbf{lower the perplexity of a model on the data, the better the model.}. Minimizing the perplexity is equivalent to maximizing the test set probability according to the language model.\nThis is how we can calculate the perplexity of a unigram language model:\n\\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i)}} \\end{equation}\nAnd the same for a bigram model: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_{i-1})}} \\end{equation}\n3.4. Sampling sentences from a language model One technique to visualize the knowledge of a model is to sample from it. Sampling from a distribution means to choose random points according to their likelihood. Sampling from a language model, which represents a distribution over sentences, means to generate some sentences, choosing each sentence according to its likelihood as defined by the model.\n","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$\u003cp\u003eWe apply this to words:\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1})\n\\end{equation}\u003c/p\u003e\n$$P(w_n|w_{n-1})$$\u003cp\u003e\\begin{equation}\nP(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003eAn example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$\nwords into the past, respectively.\u003c/p\u003e","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$We apply this to words:\n\\begin{equation} P(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1}) \\end{equation}\n\\begin{equation} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\end{equation}\n$$P(w_n|w_{n-1})$$\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1}) \\end{equation}\nAn example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$ words into the past, respectively.\nGeneralization:\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-N+1:n-1}) \\end{equation}\nIn the case of the bigram, we have:\n\\begin{equation} \\label{bigram_aprox} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\approx \\prod_{k=1}^{n} P(w_k|w_{k-1}) \\end{equation}\nWe can estimate equation\\ref{bigram_aprox} using the MLE (Maximum likelihood estimation)\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{\\sum_{w} C(w_{n-1} w)} \\end{equation} Which can be simplified to\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{C(w_{n-1} )} \\end{equation}\nWe can generalize the estimation of the MLE n-gram parameter as follows:\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=MLE n-gram parameter estimation]\n\\begin{equation} P(w_n|w_{n-N+1:n-1}) = \\frac{C(w_{n-N+1:n-1} \\ w_n)}{C(w_{n-N+1:n-1})} \\end{equation} This ratio is called the \\textbf{relative frequency} \\end{tcolorbox}\nEvaluating Language models: Training and Test sets There are different ways of evaluating a language model such as extrinsic, and intrinsic evaluation. In extrinsic evaluation we embed the language model i an application and measure how the application\u0026rsquo;s performance improves, this is a very efficient way of evaluating models, but it is unfortunately very expensive. On the other hand, a intrinsic evaluation metric measures the quality of a model independent of an application, one of this metrics is the \\textbf{perplexity}.\nTypes of datasets for model evaluation We need at least three types of datasets for evaluating a language model: training, development, and test sets.\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Types of datasets for model evaluation]\n\\textbf{Training set:} \\newline Dataset we use to learn the parameters of our model.\n\\textbf{Test set:} \\newpage Separate dataset from the training set used to evaluate the model. This test should reflect the language we want to use the model for. After training two models in the training set, we can compare how the two trained models fit the test set by determining which model assigns a higher probability to the test set. We only want to test the model once or very few times once on using the test set once the model is ready.\n\\textbf{Development set:} \\newpage We use the development set to do preliminary testing and when we are ready we only use the test set once or very few times. \\end{tcolorbox}\n3.3. Evaluating Language models: Perplexity \\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Perplexity] \\textbf{Perplexity}: The perplexity (PP, PPL) of a language model on a test set is the inverse probability of the test set (one over the probability of the test set), normalized by the number of words. This is why sometimes it is called per-word perplexity.\nFor a test set $W=w_1 w_2 \\dots w_N$:\n\\begin{align} perplexity(W) \u0026amp;= P(w_1 w_2 \\dots w_N)^{-\\frac{1}{N}} \\ \u0026amp; = \\sqrt[N]{\\frac{1}{P(w_1 w_2 \\dots w_N)}} \\end{align}\nUsing the chain rule we obtain: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_1\\dots w_{i-1})}} \\end{equation}\n\\end{tcolorbox} Note that the higher the probability of a word sequence, the lower the perplexity. Thus, the \\textbf{lower the perplexity of a model on the data, the better the model.}. Minimizing the perplexity is equivalent to maximizing the test set probability according to the language model.\nThis is how we can calculate the perplexity of a unigram language model:\n\\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i)}} \\end{equation}\nAnd the same for a bigram model: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_{i-1})}} \\end{equation}\n3.4. Sampling sentences from a language model One technique to visualize the knowledge of a model is to sample from it. Sampling from a distribution means to choose random points according to their likelihood. Sampling from a language model, which represents a distribution over sentences, means to generate some sentences, choosing each sentence according to its likelihood as defined by the model.\n","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$\u003cp\u003eWe apply this to words:\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1})\n\\end{equation}\u003c/p\u003e\n$$P(w_n|w_{n-1})$$\u003cp\u003e\\begin{equation}\nP(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003eAn example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$\nwords into the past, respectively.\u003c/p\u003e","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$We apply this to words:\n\\begin{equation} P(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1}) \\end{equation}\n\\begin{equation} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\end{equation}\n$$P(w_n|w_{n-1})$$\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1}) \\end{equation}\nAn example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$ words into the past, respectively.\nGeneralization:\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-N+1:n-1}) \\end{equation}\nIn the case of the bigram, we have:\n\\begin{equation} \\label{bigram_aprox} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\approx \\prod_{k=1}^{n} P(w_k|w_{k-1}) \\end{equation}\nWe can estimate equation\\ref{bigram_aprox} using the MLE (Maximum likelihood estimation)\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{\\sum_{w} C(w_{n-1} w)} \\end{equation} Which can be simplified to\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{C(w_{n-1} )} \\end{equation}\nWe can generalize the estimation of the MLE n-gram parameter as follows:\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=MLE n-gram parameter estimation]\n\\begin{equation} P(w_n|w_{n-N+1:n-1}) = \\frac{C(w_{n-N+1:n-1} \\ w_n)}{C(w_{n-N+1:n-1})} \\end{equation} This ratio is called the \\textbf{relative frequency} \\end{tcolorbox}\nEvaluating Language models: Training and Test sets There are different ways of evaluating a language model such as extrinsic, and intrinsic evaluation. In extrinsic evaluation we embed the language model i an application and measure how the application\u0026rsquo;s performance improves, this is a very efficient way of evaluating models, but it is unfortunately very expensive. On the other hand, a intrinsic evaluation metric measures the quality of a model independent of an application, one of this metrics is the \\textbf{perplexity}.\nTypes of datasets for model evaluation We need at least three types of datasets for evaluating a language model: training, development, and test sets.\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Types of datasets for model evaluation]\n\\textbf{Training set:} \\newline Dataset we use to learn the parameters of our model.\n\\textbf{Test set:} \\newpage Separate dataset from the training set used to evaluate the model. This test should reflect the language we want to use the model for. After training two models in the training set, we can compare how the two trained models fit the test set by determining which model assigns a higher probability to the test set. We only want to test the model once or very few times once on using the test set once the model is ready.\n\\textbf{Development set:} \\newpage We use the development set to do preliminary testing and when we are ready we only use the test set once or very few times. \\end{tcolorbox}\n3.3. Evaluating Language models: Perplexity \\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Perplexity] \\textbf{Perplexity}: The perplexity (PP, PPL) of a language model on a test set is the inverse probability of the test set (one over the probability of the test set), normalized by the number of words. This is why sometimes it is called per-word perplexity.\nFor a test set $W=w_1 w_2 \\dots w_N$:\n\\begin{align} perplexity(W) \u0026amp;= P(w_1 w_2 \\dots w_N)^{-\\frac{1}{N}} \\ \u0026amp; = \\sqrt[N]{\\frac{1}{P(w_1 w_2 \\dots w_N)}} \\end{align}\nUsing the chain rule we obtain: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_1\\dots w_{i-1})}} \\end{equation}\n\\end{tcolorbox} Note that the higher the probability of a word sequence, the lower the perplexity. Thus, the \\textbf{lower the perplexity of a model on the data, the better the model.}. Minimizing the perplexity is equivalent to maximizing the test set probability according to the language model.\nThis is how we can calculate the perplexity of a unigram language model:\n\\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i)}} \\end{equation}\nAnd the same for a bigram model: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_{i-1})}} \\end{equation}\n3.4. Sampling sentences from a language model One technique to visualize the knowledge of a model is to sample from it. Sampling from a distribution means to choose random points according to their likelihood. Sampling from a language model, which represents a distribution over sentences, means to generate some sentences, choosing each sentence according to its likelihood as defined by the model.\n","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$\u003cp\u003eWe apply this to words:\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1})\n\\end{equation}\u003c/p\u003e\n$$P(w_n|w_{n-1})$$\u003cp\u003e\\begin{equation}\nP(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003eAn example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$\nwords into the past, respectively.\u003c/p\u003e","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$We apply this to words:\n\\begin{equation} P(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1}) \\end{equation}\n\\begin{equation} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\end{equation}\n$$P(w_n|w_{n-1})$$\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1}) \\end{equation}\nAn example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$ words into the past, respectively.\nGeneralization:\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-N+1:n-1}) \\end{equation}\nIn the case of the bigram, we have:\n\\begin{equation} \\label{bigram_aprox} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\approx \\prod_{k=1}^{n} P(w_k|w_{k-1}) \\end{equation}\nWe can estimate equation\\ref{bigram_aprox} using the MLE (Maximum likelihood estimation)\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{\\sum_{w} C(w_{n-1} w)} \\end{equation} Which can be simplified to\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{C(w_{n-1} )} \\end{equation}\nWe can generalize the estimation of the MLE n-gram parameter as follows:\n[colback=blue!5!white,colframe=blue!75!black,title=MLE n-gram parameter estimation]\n\\begin{equation} P(w_n|w_{n-N+1:n-1}) = \\frac{C(w_{n-N+1:n-1} \\ w_n)}{C(w_{n-N+1:n-1})} \\end{equation} This ratio is called the \\textbf{relative frequency}\nEvaluating Language models: Training and Test sets There are different ways of evaluating a language model such as extrinsic, and intrinsic evaluation. In extrinsic evaluation we embed the language model i an application and measure how the application\u0026rsquo;s performance improves, this is a very efficient way of evaluating models, but it is unfortunately very expensive. On the other hand, a intrinsic evaluation metric measures the quality of a model independent of an application, one of this metrics is the \\textbf{perplexity}.\nTypes of datasets for model evaluation We need at least three types of datasets for evaluating a language model: training, development, and test sets.\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Types of datasets for model evaluation]\n\\textbf{Training set:} \\newline Dataset we use to learn the parameters of our model.\n\\textbf{Test set:} \\newpage Separate dataset from the training set used to evaluate the model. This test should reflect the language we want to use the model for. After training two models in the training set, we can compare how the two trained models fit the test set by determining which model assigns a higher probability to the test set. We only want to test the model once or very few times once on using the test set once the model is ready.\n\\textbf{Development set:} \\newpage We use the development set to do preliminary testing and when we are ready we only use the test set once or very few times. \\end{tcolorbox}\n3.3. Evaluating Language models: Perplexity \\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Perplexity] \\textbf{Perplexity}: The perplexity (PP, PPL) of a language model on a test set is the inverse probability of the test set (one over the probability of the test set), normalized by the number of words. This is why sometimes it is called per-word perplexity.\nFor a test set $W=w_1 w_2 \\dots w_N$:\n\\begin{align} perplexity(W) \u0026amp;= P(w_1 w_2 \\dots w_N)^{-\\frac{1}{N}} \\ \u0026amp; = \\sqrt[N]{\\frac{1}{P(w_1 w_2 \\dots w_N)}} \\end{align}\nUsing the chain rule we obtain: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_1\\dots w_{i-1})}} \\end{equation}\n\\end{tcolorbox} Note that the higher the probability of a word sequence, the lower the perplexity. Thus, the \\textbf{lower the perplexity of a model on the data, the better the model.}. Minimizing the perplexity is equivalent to maximizing the test set probability according to the language model.\nThis is how we can calculate the perplexity of a unigram language model:\n\\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i)}} \\end{equation}\nAnd the same for a bigram model: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_{i-1})}} \\end{equation}\n3.4. Sampling sentences from a language model One technique to visualize the knowledge of a model is to sample from it. Sampling from a distribution means to choose random points according to their likelihood. Sampling from a language model, which represents a distribution over sentences, means to generate some sentences, choosing each sentence according to its likelihood as defined by the model.\n","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$\u003cp\u003eWe apply this to words:\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1})\n\\end{equation}\u003c/p\u003e\n$$P(w_n|w_{n-1})$$\u003cp\u003e\\begin{equation}\nP(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003eAn example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$\nwords into the past, respectively.\u003c/p\u003e","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$We apply this to words:\n\\begin{equation} P(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1}) \\end{equation}\n\\begin{equation} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\end{equation}\n$$P(w_n|w_{n-1})$$\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1}) \\end{equation}\nAn example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$ words into the past, respectively.\nGeneralization:\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-N+1:n-1}) \\end{equation}\nIn the case of the bigram, we have:\n\\begin{equation} \\label{bigram_aprox} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\approx \\prod_{k=1}^{n} P(w_k|w_{k-1}) \\end{equation}\nWe can estimate equation\\ref{bigram_aprox} using the MLE (Maximum likelihood estimation)\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{\\sum_{w} C(w_{n-1} w)} \\end{equation} Which can be simplified to\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{C(w_{n-1} )} \\end{equation}\nWe can generalize the estimation of the MLE n-gram parameter as follows:\n\\begin{equation} P(w_n|w_{n-N+1:n-1}) = \\frac{C(w_{n-N+1:n-1} \\ w_n)}{C(w_{n-N+1:n-1})} \\end{equation} This ratio is called the \\textbf{relative frequency}\nEvaluating Language models: Training and Test sets There are different ways of evaluating a language model such as extrinsic, and intrinsic evaluation. In extrinsic evaluation we embed the language model i an application and measure how the application\u0026rsquo;s performance improves, this is a very efficient way of evaluating models, but it is unfortunately very expensive. On the other hand, a intrinsic evaluation metric measures the quality of a model independent of an application, one of this metrics is the \\textbf{perplexity}.\nTypes of datasets for model evaluation We need at least three types of datasets for evaluating a language model: training, development, and test sets.\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Types of datasets for model evaluation]\n\\textbf{Training set:} \\newline Dataset we use to learn the parameters of our model.\n\\textbf{Test set:} \\newpage Separate dataset from the training set used to evaluate the model. This test should reflect the language we want to use the model for. After training two models in the training set, we can compare how the two trained models fit the test set by determining which model assigns a higher probability to the test set. We only want to test the model once or very few times once on using the test set once the model is ready.\n\\textbf{Development set:} \\newpage We use the development set to do preliminary testing and when we are ready we only use the test set once or very few times. \\end{tcolorbox}\n3.3. Evaluating Language models: Perplexity \\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Perplexity] \\textbf{Perplexity}: The perplexity (PP, PPL) of a language model on a test set is the inverse probability of the test set (one over the probability of the test set), normalized by the number of words. This is why sometimes it is called per-word perplexity.\nFor a test set $W=w_1 w_2 \\dots w_N$:\n\\begin{align} perplexity(W) \u0026amp;= P(w_1 w_2 \\dots w_N)^{-\\frac{1}{N}} \\ \u0026amp; = \\sqrt[N]{\\frac{1}{P(w_1 w_2 \\dots w_N)}} \\end{align}\nUsing the chain rule we obtain: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_1\\dots w_{i-1})}} \\end{equation}\n\\end{tcolorbox} Note that the higher the probability of a word sequence, the lower the perplexity. Thus, the \\textbf{lower the perplexity of a model on the data, the better the model.}. Minimizing the perplexity is equivalent to maximizing the test set probability according to the language model.\nThis is how we can calculate the perplexity of a unigram language model:\n\\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i)}} \\end{equation}\nAnd the same for a bigram model: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_{i-1})}} \\end{equation}\n3.4. Sampling sentences from a language model One technique to visualize the knowledge of a model is to sample from it. Sampling from a distribution means to choose random points according to their likelihood. Sampling from a language model, which represents a distribution over sentences, means to generate some sentences, choosing each sentence according to its likelihood as defined by the model.\n","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$\u003cp\u003eWe apply this to words:\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1})\n\\end{equation}\u003c/p\u003e\n$$P(w_n|w_{n-1})$$\u003cp\u003e\\begin{equation}\nP(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003eAn example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$\nwords into the past, respectively.\u003c/p\u003e","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$We apply this to words:\n\\begin{equation} P(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1}) \\end{equation}\n\\begin{equation} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\end{equation}\n$$P(w_n|w_{n-1})$$\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1}) \\end{equation}\nAn example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$ words into the past, respectively.\nGeneralization:\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-N+1:n-1}) \\end{equation}\nIn the case of the bigram, we have:\n\\begin{equation} \\label{bigram_aprox} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\approx \\prod_{k=1}^{n} P(w_k|w_{k-1}) \\end{equation}\nWe can estimate equation\\ref{bigram_aprox} using the MLE (Maximum likelihood estimation)\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{\\sum_{w} C(w_{n-1} w)} \\end{equation} Which can be simplified to\n\\boxed{ \\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{C(w_{n-1} )} \\end{equation}\nWe can generalize the estimation of the MLE n-gram parameter as follows:\n\\begin{equation} P(w_n|w_{n-N+1:n-1}) = \\frac{C(w_{n-N+1:n-1} \\ w_n)}{C(w_{n-N+1:n-1})} \\end{equation} This ratio is called the \\textbf{relative frequency} }\nEvaluating Language models: Training and Test sets There are different ways of evaluating a language model such as extrinsic, and intrinsic evaluation. In extrinsic evaluation we embed the language model i an application and measure how the application\u0026rsquo;s performance improves, this is a very efficient way of evaluating models, but it is unfortunately very expensive. On the other hand, a intrinsic evaluation metric measures the quality of a model independent of an application, one of this metrics is the \\textbf{perplexity}.\nTypes of datasets for model evaluation We need at least three types of datasets for evaluating a language model: training, development, and test sets.\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Types of datasets for model evaluation]\n\\textbf{Training set:} \\newline Dataset we use to learn the parameters of our model.\n\\textbf{Test set:} \\newpage Separate dataset from the training set used to evaluate the model. This test should reflect the language we want to use the model for. After training two models in the training set, we can compare how the two trained models fit the test set by determining which model assigns a higher probability to the test set. We only want to test the model once or very few times once on using the test set once the model is ready.\n\\textbf{Development set:} \\newpage We use the development set to do preliminary testing and when we are ready we only use the test set once or very few times. \\end{tcolorbox}\n3.3. Evaluating Language models: Perplexity \\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Perplexity] \\textbf{Perplexity}: The perplexity (PP, PPL) of a language model on a test set is the inverse probability of the test set (one over the probability of the test set), normalized by the number of words. This is why sometimes it is called per-word perplexity.\nFor a test set $W=w_1 w_2 \\dots w_N$:\n\\begin{align} perplexity(W) \u0026amp;= P(w_1 w_2 \\dots w_N)^{-\\frac{1}{N}} \\ \u0026amp; = \\sqrt[N]{\\frac{1}{P(w_1 w_2 \\dots w_N)}} \\end{align}\nUsing the chain rule we obtain: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_1\\dots w_{i-1})}} \\end{equation}\n\\end{tcolorbox} Note that the higher the probability of a word sequence, the lower the perplexity. Thus, the \\textbf{lower the perplexity of a model on the data, the better the model.}. Minimizing the perplexity is equivalent to maximizing the test set probability according to the language model.\nThis is how we can calculate the perplexity of a unigram language model:\n\\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i)}} \\end{equation}\nAnd the same for a bigram model: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_{i-1})}} \\end{equation}\n3.4. Sampling sentences from a language model One technique to visualize the knowledge of a model is to sample from it. Sampling from a distribution means to choose random points according to their likelihood. Sampling from a language model, which represents a distribution over sentences, means to generate some sentences, choosing each sentence according to its likelihood as defined by the model.\n","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$\u003cp\u003eWe apply this to words:\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1})\n\\end{equation}\u003c/p\u003e\n$$P(w_n|w_{n-1})$$\u003cp\u003e\\begin{equation}\nP(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003eAn example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$\nwords into the past, respectively.\u003c/p\u003e","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$We apply this to words:\n\\begin{equation} P(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1}) \\end{equation}\n\\begin{equation} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\end{equation}\n$$P(w_n|w_{n-1})$$\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1}) \\end{equation}\nAn example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$ words into the past, respectively.\nGeneralization:\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-N+1:n-1}) \\end{equation}\nIn the case of the bigram, we have:\n\\begin{equation} \\label{bigram_aprox} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\approx \\prod_{k=1}^{n} P(w_k|w_{k-1}) \\end{equation}\nWe can estimate equation\\ref{bigram_aprox} using the MLE (Maximum likelihood estimation)\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{\\sum_{w} C(w_{n-1} w)} \\end{equation} Which can be simplified to\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{C(w_{n-1} )} \\end{equation}\nWe can generalize the estimation of the MLE n-gram parameter as follows:\n\\begin{equation} P(w_n|w_{n-N+1:n-1}) = \\frac{C(w_{n-N+1:n-1} \\ w_n)}{C(w_{n-N+1:n-1})} \\end{equation} This ratio is called the \\textbf{relative frequency}\nEvaluating Language models: Training and Test sets There are different ways of evaluating a language model such as extrinsic, and intrinsic evaluation. In extrinsic evaluation we embed the language model i an application and measure how the application\u0026rsquo;s performance improves, this is a very efficient way of evaluating models, but it is unfortunately very expensive. On the other hand, a intrinsic evaluation metric measures the quality of a model independent of an application, one of this metrics is the \\textbf{perplexity}.\nTypes of datasets for model evaluation We need at least three types of datasets for evaluating a language model: training, development, and test sets.\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Types of datasets for model evaluation]\n\\textbf{Training set:} \\newline Dataset we use to learn the parameters of our model.\n\\textbf{Test set:} \\newpage Separate dataset from the training set used to evaluate the model. This test should reflect the language we want to use the model for. After training two models in the training set, we can compare how the two trained models fit the test set by determining which model assigns a higher probability to the test set. We only want to test the model once or very few times once on using the test set once the model is ready.\n\\textbf{Development set:} \\newpage We use the development set to do preliminary testing and when we are ready we only use the test set once or very few times. \\end{tcolorbox}\n3.3. Evaluating Language models: Perplexity \\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Perplexity] \\textbf{Perplexity}: The perplexity (PP, PPL) of a language model on a test set is the inverse probability of the test set (one over the probability of the test set), normalized by the number of words. This is why sometimes it is called per-word perplexity.\nFor a test set $W=w_1 w_2 \\dots w_N$:\n\\begin{align} perplexity(W) \u0026amp;= P(w_1 w_2 \\dots w_N)^{-\\frac{1}{N}} \\ \u0026amp; = \\sqrt[N]{\\frac{1}{P(w_1 w_2 \\dots w_N)}} \\end{align}\nUsing the chain rule we obtain: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_1\\dots w_{i-1})}} \\end{equation}\n\\end{tcolorbox} Note that the higher the probability of a word sequence, the lower the perplexity. Thus, the \\textbf{lower the perplexity of a model on the data, the better the model.}. Minimizing the perplexity is equivalent to maximizing the test set probability according to the language model.\nThis is how we can calculate the perplexity of a unigram language model:\n\\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i)}} \\end{equation}\nAnd the same for a bigram model: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_{i-1})}} \\end{equation}\n3.4. Sampling sentences from a language model One technique to visualize the knowledge of a model is to sample from it. Sampling from a distribution means to choose random points according to their likelihood. Sampling from a language model, which represents a distribution over sentences, means to generate some sentences, choosing each sentence according to its likelihood as defined by the model.\n","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$\u003cp\u003eWe apply this to words:\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1})\n\\end{equation}\u003c/p\u003e\n$$P(w_n|w_{n-1})$$\u003cp\u003e\\begin{equation}\nP(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003eAn example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$\nwords into the past, respectively.\u003c/p\u003e","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$We apply this to words:\n\\begin{equation} P(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1}) \\end{equation}\n\\begin{equation} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\end{equation}\n$$P(w_n|w_{n-1})$$\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1}) \\end{equation}\nAn example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$ words into the past, respectively.\nGeneralization:\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-N+1:n-1}) \\end{equation}\nIn the case of the bigram, we have:\n\\begin{equation} \\label{bigram_aprox} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\approx \\prod_{k=1}^{n} P(w_k|w_{k-1}) \\end{equation}\nWe can estimate equation\\ref{bigram_aprox} using the MLE (Maximum likelihood estimation)\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{\\sum_{w} C(w_{n-1} w)} \\end{equation} Which can be simplified to\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{C(w_{n-1} )} \\end{equation}\nWe can generalize the estimation of the MLE n-gram parameter as follows:\n\\begin{equation} P(w_n|w_{n-N+1:n-1}) = \\frac{C(w_{n-N+1:n-1} \\ w_n)}{C(w_{n-N+1:n-1})} \\end{equation} This ratio is called the relative frequency\nEvaluating Language models: Training and Test sets There are different ways of evaluating a language model such as extrinsic, and intrinsic evaluation. In extrinsic evaluation we embed the language model i an application and measure how the application\u0026rsquo;s performance improves, this is a very efficient way of evaluating models, but it is unfortunately very expensive. On the other hand, a intrinsic evaluation metric measures the quality of a model independent of an application, one of this metrics is the \\textbf{perplexity}.\nTypes of datasets for model evaluation We need at least three types of datasets for evaluating a language model: training, development, and test sets.\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Types of datasets for model evaluation]\n\\textbf{Training set:} \\newline Dataset we use to learn the parameters of our model.\n\\textbf{Test set:} \\newpage Separate dataset from the training set used to evaluate the model. This test should reflect the language we want to use the model for. After training two models in the training set, we can compare how the two trained models fit the test set by determining which model assigns a higher probability to the test set. We only want to test the model once or very few times once on using the test set once the model is ready.\n\\textbf{Development set:} \\newpage We use the development set to do preliminary testing and when we are ready we only use the test set once or very few times. \\end{tcolorbox}\n3.3. Evaluating Language models: Perplexity \\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Perplexity] \\textbf{Perplexity}: The perplexity (PP, PPL) of a language model on a test set is the inverse probability of the test set (one over the probability of the test set), normalized by the number of words. This is why sometimes it is called per-word perplexity.\nFor a test set $W=w_1 w_2 \\dots w_N$:\n\\begin{align} perplexity(W) \u0026amp;= P(w_1 w_2 \\dots w_N)^{-\\frac{1}{N}} \\ \u0026amp; = \\sqrt[N]{\\frac{1}{P(w_1 w_2 \\dots w_N)}} \\end{align}\nUsing the chain rule we obtain: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_1\\dots w_{i-1})}} \\end{equation}\n\\end{tcolorbox} Note that the higher the probability of a word sequence, the lower the perplexity. Thus, the \\textbf{lower the perplexity of a model on the data, the better the model.}. Minimizing the perplexity is equivalent to maximizing the test set probability according to the language model.\nThis is how we can calculate the perplexity of a unigram language model:\n\\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i)}} \\end{equation}\nAnd the same for a bigram model: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_{i-1})}} \\end{equation}\n3.4. Sampling sentences from a language model One technique to visualize the knowledge of a model is to sample from it. Sampling from a distribution means to choose random points according to their likelihood. Sampling from a language model, which represents a distribution over sentences, means to generate some sentences, choosing each sentence according to its likelihood as defined by the model.\n","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$\u003cp\u003eWe apply this to words:\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1})\n\\end{equation}\u003c/p\u003e\n$$P(w_n|w_{n-1})$$\u003cp\u003e\\begin{equation}\nP(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003eAn example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$\nwords into the past, respectively.\u003c/p\u003e","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"},{"content":"Equation $$ \\boxed{ P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1}) } $$$$ \\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1}) \\end{equation} $$We apply this to words:\n\\begin{equation} P(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1}) \\end{equation}\n\\begin{equation} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\end{equation}\n$$P(w_n|w_{n-1})$$\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1}) \\end{equation}\nAn example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$ words into the past, respectively.\nGeneralization:\n\\begin{equation} P(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-N+1:n-1}) \\end{equation}\nIn the case of the bigram, we have:\n\\begin{equation} \\label{bigram_aprox} P(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1}) \\approx \\prod_{k=1}^{n} P(w_k|w_{k-1}) \\end{equation}\nWe can estimate equation\\ref{bigram_aprox} using the MLE (Maximum likelihood estimation)\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{\\sum_{w} C(w_{n-1} w)} \\end{equation} Which can be simplified to\n\\begin{equation} P(w_n | w_{n-1}) = \\frac{C(w_{n-1}w_n)}{C(w_{n-1} )} \\end{equation}\nWe can generalize the estimation of the MLE n-gram parameter as follows:\n\\begin{equation} P(w_n|w_{n-N+1:n-1}) = \\frac{C(w_{n-N+1:n-1} \\ w_n)}{C(w_{n-N+1:n-1})} \\end{equation} This ratio is called the relative frequency\nEvaluating Language models: Training and Test sets There are different ways of evaluating a language model such as extrinsic, and intrinsic evaluation. In extrinsic evaluation we embed the language model i an application and measure how the application\u0026rsquo;s performance improves, this is a very efficient way of evaluating models, but it is unfortunately very expensive. On the other hand, a intrinsic evaluation metric measures the quality of a model independent of an application, one of this metrics is the \\textbf{perplexity}.\nTypes of datasets for model evaluation We need at least three types of datasets for evaluating a language model: training, development, and test sets.\n\\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Types of datasets for model evaluation]\n\\textbf{Training set:} \\newline Dataset we use to learn the parameters of our model.\n\\textbf{Test set:} \\newpage Separate dataset from the training set used to evaluate the model. This test should reflect the language we want to use the model for. After training two models in the training set, we can compare how the two trained models fit the test set by determining which model assigns a higher probability to the test set. We only want to test the model once or very few times once on using the test set once the model is ready.\n\\textbf{Development set:} \\newpage We use the development set to do preliminary testing and when we are ready we only use the test set once or very few times. \\end{tcolorbox}\n3.3. Evaluating Language models: Perplexity \\begin{tcolorbox} [colback=blue!5!white,colframe=blue!75!black,title=Perplexity] \\textbf{Perplexity}: The perplexity (PP, PPL) of a language model on a test set is the inverse probability of the test set (one over the probability of the test set), normalized by the number of words. This is why sometimes it is called per-word perplexity.\nFor a test set $W=w_1 w_2 \\dots w_N$:\n\\begin{align} perplexity(W) \u0026amp;= P(w_1 w_2 \\dots w_N)^{-\\frac{1}{N}} \\ \u0026amp; = \\sqrt[N]{\\frac{1}{P(w_1 w_2 \\dots w_N)}} \\end{align}\nUsing the chain rule we obtain: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_1\\dots w_{i-1})}} \\end{equation}\n\\end{tcolorbox} Note that the higher the probability of a word sequence, the lower the perplexity. Thus, the \\textbf{lower the perplexity of a model on the data, the better the model.}. Minimizing the perplexity is equivalent to maximizing the test set probability according to the language model.\nThis is how we can calculate the perplexity of a unigram language model:\n\\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i)}} \\end{equation}\nAnd the same for a bigram model: \\begin{equation} perplexity(W) = \\sqrt[N]{\\prod_{i=1}^{N} \\frac{1}{P(w_i|w_{i-1})}} \\end{equation}\n3.4. Sampling sentences from a language model One technique to visualize the knowledge of a model is to sample from it. Sampling from a distribution means to choose random points according to their likelihood. Sampling from a language model, which represents a distribution over sentences, means to generate some sentences, choosing each sentence according to its likelihood as defined by the model.\n","permalink":"http://localhost:1313/posts/2_n_gram_language_models/","summary":"\u003ch1 id=\"equation\"\u003eEquation\u003c/h1\u003e\n$$\n\\boxed{\n    P(X_1, \\dots, X_n) = P(X_1) P(X_2 | X_1) P(X_3 | X_{1:2} \\dots P(X_n | X_1:{n-1})\n}\n$$$$\n\\begin{equation} P(X_1, \\dots, X_n) = \\prod_{k=1}^{n} P(X_k | X_{1:k-1})\n\\end{equation}\n$$\u003cp\u003eWe apply this to words:\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = P(w_1) P(w_2|w_1) P(w_3|w_{1:2}) \\dots P(w_n|w_{1:n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003e\\begin{equation}\nP(w_{1:n}) = \\prod_{k=1}^{n} P(w_k|w_{1:k-1})\n\\end{equation}\u003c/p\u003e\n$$P(w_n|w_{n-1})$$\u003cp\u003e\\begin{equation}\nP(w_n|w_{1:n-1}) \\approx P(w_n|w_{n-1})\n\\end{equation}\u003c/p\u003e\n\u003cp\u003eAn example of a \\textbf{Markov assumption} is when the probability of a word depends only on the previous word in the case of a bigram, a trigram, and a n-gram looks two words, and $n-1$\nwords into the past, respectively.\u003c/p\u003e","title":"N-Gram Language Models"},{"content":"TLDR conda create --name my_conda_env python=3.11 conda env list conda activate my_conda_env pip install \u0026lt;package_name\u0026gt; or\npip install -r requirements.txt What\u0026rsquo;s a conda environment? Knowing how to set up a Conda environment is an essential skill for any data scientist or Python developer. Conda is an open source package management system for Python.\nIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use any dependency you will need.\nCreate conda environment Install and validate your anaconda or conda installation For this tutorial, you will need to install Python and Anaconda, I recommend downloading miniconda, which is a lighter version of Anaconda.\nBefore creating a conda environment, you need to check if conda is installed in your system. To do this, open your terminal and type:\nconda --version You should see something like this:\nconda 4.12.0 Now, make sure you have the latest version of conda by running:\nconda update conda Create the environment You are now ready to create your first conda environment. To do this, run:\nconda create --name my_conda_env python=3.10 To specify the path where you want to create the environment, use the --prefix or -p flag. For example, to create the environment in the default_path directory, run:\nconda create --prefix \u0026lt;default_path\u0026gt;/my_conda_env python=3.10 Make you created the environment by running the following command:\nconda env list # conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env As you can see, the environment you just created is listed in the output, but it is not active yet. To activate it, run:\nconda activate /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Now the * symbol is next to the environment you just activated.\n# conda environments: # base /Users/Jroldan001/opt/anaconda3 my_conda_env * /Users/Jroldan001/opt/anaconda3/envs/my_conda_env Check python and pip Now that you created your environment, make sure that you are using the correct python and pip. For this run which python and which pip. You should see the same path as the one you used to create the environment.\nInstall packages using pip Now that you have your environment set up, you can install any package you need. For this, you can use pip. For example, to install numpy run:\npip install numpy You can check that the package was installed by running:\npip freeze And you will see the following\nnumpy==1.25.2 Install packages from a requirements.txt file If you have a requirements.txt file, you can install all the packages listed in it by running:\npip install -r requirements.txt You can check that all packages were installed by again running the pip freeze command.\nDeactivate the environment To deactivate the environment, run:\nconda deactivate As you will see, the * symbol is now next to the base environment.\n# conda environments: # base * /Users/Jroldan001/opt/anaconda3 my_conda_env /Users/Jroldan001/opt/anaconda3/envs/my_conda_env ","permalink":"http://localhost:1313/posts/1_setting-up-a-conda-environment/","summary":"\u003ch1 id=\"tldr\"\u003eTLDR\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda create --name my_conda_env \u003cspan class=\"nv\"\u003epython\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e3.11\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda env list\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003econda activate my_conda_env\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install \u0026lt;package_name\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install -r requirements.txt \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"whats-a-conda-environment\"\u003eWhat\u0026rsquo;s a conda environment?\u003c/h1\u003e\n\u003cp\u003eKnowing how to set up a Conda environment is an essential skill for any data scientist or Python developer.  Conda is\nan open source package management system  for Python.\u003c/p\u003e\n\u003cp\u003eIn this post, I will show you how to set up a Conda environment for your project, doing this, will help you to easily install and use\nany dependency you will need.\u003c/p\u003e","title":"Setting up a Conda environment"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"http://localhost:1313/posts/x_using-hugo-posts/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e","title":"Using hugo posts"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n$$ \\begin{equation} 3x^2 = \\int_i^s2b_2 \\label{eq1test} \\end{equation} $$This is equation \\(\\eqref{eq1test}\\)\nThis is an inline \\(a^*=x-b^*\\) equation.\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[ a^*=x-b^* \\]These are also block equations:\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$ a^*=x-b^* $$$$ \\boxed{\\color{blue} E = mc^2} $$$$ \\boxed{\\color{red} E = mc^2} $$","permalink":"http://localhost:1313/posts/x_using-mathjax-for-latex-support/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis is \u003cstrong\u003ebold\u003c/strong\u003e text, and this is \u003cem\u003eemphasized\u003c/em\u003e text.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e website!\u003c/p\u003e\n$$\n\\begin{equation}\n    3x^2 = \\int_i^s2b_2\n    \\label{eq1test}\n\\end{equation}\n$$\u003cp\u003eThis is equation \\(\\eqref{eq1test}\\)\u003c/p\u003e\n\u003cp\u003eThis is an inline \\(a^*=x-b^*\\) equation.\u003c/p\u003e\n\\[a^*=x-b^*\\]\\[ a^*=x-b^* \\]\\[\na^*=x-b^*\n\\]\u003cp\u003eThese are also block equations:\u003c/p\u003e\n$$a^*=x-b^*$$$$ a^*=x-b^* $$$$\na^*=x-b^*\n$$$$\n\\boxed{\\color{blue} E = mc^2}\n$$$$\n\\boxed{\\color{red} E = mc^2}\n$$","title":"Using Mathjax for Latex support"}]